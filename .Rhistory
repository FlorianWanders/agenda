origin="1970-01-01")
as.POSIXct(
ifelse( wday(day) == 2, day,
ifelse(wday(day) == 1, day - days(6),
day - days( wday(day)-2 )) ),
origin="1970-01-01")
prevbestmonday <- function(day)   { #requires lubridate
as.POSIXct(
ifelse( wday(day) == 2, day, #return the day if its a Monday
ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) ), #substract 2 less than the day
origin="1970-01-01")
}
ymd(prevbestmonday(start))
prevbestmonday(start)
as.POSIXct(
ifelse( wday(day) == 2, day, #return the day if its a Monday
ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) ), #substract 2 less than the day
origin="1970-01-01")
as.Date(
ifelse( wday(day) == 2, day, #return the day if its a Monday
ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) ), #substract 2 less than the day
origin="1970-01-01")
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) ), #substract 2 less than the day
safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 ))
)
start <- "01.07.2015"
start <- dmy(start)
wday(start)
day=start
safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 ))
)
safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) )
day
day - days(6)
day - days( wday(day)-2 ))
day - days( wday(day)-2 )
bla <- safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) )
year(bla)
safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) )
monday <- safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) )
monday
paste(day(monday), month(monday), year(monday))
paste(day(monday), month(monday), year(monday), sep="")
paste(day(monday), month(monday), year(monday), sep=".")
monday <- ymd(monday)
monday <- dmy(monday)
monday <- paste(day(monday), month(monday), year(monday), sep=".")
monday <- dmy(monday)
monday
monday <- safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6), #substract 6 days if its a Sunday
day - days( wday(day)-2 )) )
monday <- paste(day(monday), month(monday), year(monday), sep=".")
monday
monday <- dmy(monday)
monday
prevbestmonday <- function(day)   { #requires lubridate
monday <- safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6),  #substract 6 days if its a Sunday
day - days( wday(day)-2 )) )
monday <- paste(day(monday), month(monday), year(monday), sep=".")
monday <- dmy(monday)
}
prevbestmonday(start)
prevbestmonday <- function(day)   { #requires lubridate
monday <- safe.ifelse( wday(day) == 2, day, #return the day if its a Monday
safe.ifelse(wday(day) == 1, day - days(6),  #substract 6 days if its a Sunday
day - days( wday(day)-2 )) )
monday <- paste(day(monday), month(monday), year(monday), sep=".")
monday <- dmy(monday)
monday
}
prevbestmonday(start)
bla <- prevbestmonday(start)
bla
day +
safe.ifelse(wday(day) == 2, days(0),
safe.ifelse(wday(day) == 3, days(6),
safe.ifelse(wday(day) == 4, days(5),
safe.ifelse(wday(day) == 5, days(4),
safe.ifelse(wday(day) == 6, days(3),
safe.ifelse(wday(day) == 7, days(2),
safe.ifelse(wday(day) == 0, days(1))
)
)
)
)
)
)
8-1:7
3:7
8-3:7
7-3:7
9-3:7
10-2:7
9-2:7
9-3:7
9-3:7
9-2:7
9-3:7
wday(Sysdate)
wday(Sys.date)
?sysdate
??sysdate
wday(Sys.Date())
Sys.Date()
wday(Sys.Date())
wday(ymd("20150728"))
wday(ymd("20150726"))
wday(ymd("20150725"))
wday(ymd("20150725"))
9-3:7
day - (9 - days( wday(day)))
9-4:7
9-3:7
9-2:7
9-3:7
9-3:7
10-2:7
10-3:7
9-3:7
9-3:7
9-3:8
9-3:2
9-3:7
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon  ## 9-3:7
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
safe.ifelse(wday(day) == 7, day + days(1),  #Saturday
day - (9 - days( wday(day)))) ) #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
nextbestsunday(start)
nextbestsunday(ymd("2015.07.25"))
nextbestsunday(ymd("2015.07.26"))
nextbestsunday(ymd("2015.07.25"))
nextbestsunday(ymd("2015.07.24"))
nextbestmonday(ymd("2015,07.24"))
# (in the future if day unequal to Sunday)
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon  ## 9-3:7
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
safe.ifelse(wday(day) == 7, day + days(1),  #Saturday
day + (9 - days( wday(day)))) ) #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
seq(ymd("2015,07.24"), ymd("2015,07.24"))
seq(ymd("2015,07.24"), ymd("2015,07.24"), "days")
seq(ymd("2015,06.29"), ymd("2015,07.05"), "days")
test <- seq(ymd("2015,06.29"), ymd("2015,07.05"), "days")
test1 <- test[1]
nextbestsunday(test1)
test <- seq(ymd("2015,06.29"), ymd("2015,07.05"), "days")
test1 <- test[1]
nextbestsunday(test1)
test[1]
9 - 2:6
9 - 3:7
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon  ## 9-3:7
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
safe.ifelse(wday(day) == 7, day + days(1),  #Saturday
day + (8 - days( wday(day)))) ) #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
safe.ifelse(wday(day) == 7, day + days(1),  #Saturday
day + (8 - days( wday(day)))) ) #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
test <- seq(ymd("2015,06.29"), ymd("2015,07.05"), "days")
test1 <- test[1]
nextbestsunday(test1)
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (8 - days( wday(day)))) ) #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (8 - days( wday(day))))  #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
test <- seq(ymd("2015,06.29"), ymd("2015,07.05"), "days")
test1 <- test[2]
nextbestsunday(test1)
test <- seq(ymd("2015.06.29"), ymd("2015.07.05"), "days")
test1 <- test[2]
nextbestsunday(test1)
test1 <- test[1]
nextbestsunday(test1)
test1 <- test[2]
nextbestsunday(test1)
test1 <- test[3]
nextbestsunday(test1)
test1 <- test[4]
nextbestsunday(test1)
test1 <- test[5]
nextbestsunday(test1)
test1 <- test[6]
nextbestsunday(test1)
test1 <- test[7]
nextbestsunday(test1)
8 - days( wday(day))
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (days(8) - days( wday(day))))  #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
test <- seq(ymd("2015.06.29"), ymd("2015.07.05"), "days")
test1 <- test[7]
nextbestsunday(test1)
test1 <- test[1]
nextbestsunday(test1)
test1 <- test[3]
nextbestsunday(test1)
test1 <- test[4]
nextbestsunday(test1)
test1 <- test[5]
nextbestsunday(test1)
test1 <- test[6]
nextbestsunday(test1)
test1 <- test[7]
nextbestsunday(test1)
rm(list=ls())
start <- "01.07.2015" # any date around which the agenda should begin (dd.mm.yyyy)
monthly_pages <- 3 # number of pages for the monthly overview (1 page = 6 months)
################################################################################
## Set-Up, packages, and custom functions ######################################
################################################################################
invisible(Sys.setlocale("LC_ALL","English"))
library(dplyr)
library(reshape2)
library(lubridate)
# from Hadley's comment on http://stackoverflow.com/a/6669237/4798582:
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
# prevbestmonday returns next best Monday
# (in the past if day unequal to Monday,
#  therefore the name: prev(ious) best monday)
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) ) #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) ) #other days
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 ))  #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Monday
day - days( wday(day)-2 ))  #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
rm(list=ls())
start <- "01.07.2015" # any date around which the agenda should begin (dd.mm.yyyy)
monthly_pages <- 3 # number of pages for the monthly overview (1 page = 6 months)
################################################################################
## Set-Up, packages, and custom functions ######################################
################################################################################
invisible(Sys.setlocale("LC_ALL","English"))
library(dplyr)
library(reshape2)
library(lubridate)
# from Hadley's comment on http://stackoverflow.com/a/6669237/4798582:
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
# prevbestmonday returns next best Monday
# (in the past if day unequal to Monday,
#  therefore the name: prev(ious) best monday)
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
# nextbestsunday returns next best Sunday
# (in the future if day unequal to Sunday)
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (days(8) - days( wday(day))))  #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
################################################################################
## Calculating start and end dates #############################################
################################################################################
# Convert start into date and extract year and month
start <- dmy(start)
start_month <- month(start)
start_year <- year(start)
# Find the first and last date for the monthly overview
monthly_start <- paste("01", start_month, start_year, sep=".")
monthly_start <- dmy(monthly_start)
monthly_length <- paste(monthly_pages*6, "months")
monthly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=monthly_length
)[2] - 1
monthly_end <- ymd(monthly_end)
# Find first and last date for the weekly overview
weekly_start <- prevbestmonday(start)
weekly_end <- nextbestsunday(monthly_end)
################################################################################
## Calculating the dates for the weekly overview ###############################
################################################################################
weekly_range <- seq(weekly_start, weekly_end, "days")
weekly_dates <- format(weekly_range, "%d.%m") #31.01
weekly_days <- format(weekly_range, "%A")     #Monday
weekly_weeks <- format(weekly_range,"%W") #1
weekly_months <- format(weekly_range, "%B")   #January
weekly_years <- format(weekly_range, "%Y")    #2015
weekly_wknds  <- ifelse(wday(weekly_range) %in% c(7,1), TRUE, FALSE)  #weekends
weekly_df <- data.frame(weekly_dates,
weekly_days,
weekly_weeks,
weekly_months,
weekly_years,
weekly_wknds)
colnames(weekly_df) <- gsub(".*\\_","",colnames(weekly_df))
monthly_range <- seq(monthly_start, monthly_end, "days")
monthly_dates <- format(monthly_range, "%d")    #31
# monthly_days <- format(monthly_range, "%a")     #Mon  #delete?
# monthly_wknds <- ifelse(wday(monthly_range) %in% c(7,1), TRUE, FALSE)  #weekends #delete
# monthly_weeks <- format(monthly_range,"%W") #1
# monthly_months <- format(monthly_range, "%B")   #January
# monthly_years <- format(monthly_range, "%Y")    #2015
#----------------------------------------------------------
monthly_daywday <- format(monthly_range, "%d %a")
monthly_monthyear <- format(monthly_range, "%B %Y")
monthly_df <- data.frame(
monthly_dates,
#   monthly_days,
#   monthly_weeks,
#   monthly_months,
#   monthly_years,
monthly_daywday,
monthly_monthyear,
#monthly_wknds
)
# remove monthly_ from column names
colnames(monthly_df) <- gsub(".*\\_","",colnames(monthly_df))
