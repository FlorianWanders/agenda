d1 <- split(d, ceiling(x/max))
monthc <- NULL
d1
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
i <- 1:6
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
#knitr childs can only have one code chunk; continue in knitr chunk using cat
cat("\\Latex\n") #increase cell height here. If added later, clipping with tikz won't work.
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%\n", "%\n")
cat(endswitch)
i <- 7:12
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
#knitr childs can only have one code chunk; continue in knitr chunk using cat
cat("\\Latex\n") #increase cell height here. If added later, clipping with tikz won't work.
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%\n", "%\n")
cat(endswitch)
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
\Sexpr{knit_child('beginswitch.Rnw')}
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%", "%")
cat(endswitch)
start <- "01.08.2015" # any date around which the agenda should begin (dd.mm.yyyy)
#Choose an uneven number for monthly_pages or manually add a blank line between
#The monthly overview and the weekly agenda in the "Main Document" section below
monthly_pages <- 3 # number of pages for the monthly overview (1 page = 6 months)
day_start <- 7 #first hour in the weekly agenda
day_end <- 21 #last hour in the weekly agenda
################################################################################
## Set-Up, packages, and custom functions ######################################
################################################################################
invisible(Sys.setlocale("LC_ALL","English"))
library(dplyr)
library(reshape2)
library(lubridate)
# from Hadley's comment on http://stackoverflow.com/a/6669237/4798582:
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
# prevbestmonday returns next best Monday
# (in the past if day unequal to Monday,
#  therefore the name: prev(ious) best monday)
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
# nextbestsunday returns next best Sunday
# (in the future if day unequal to Sunday)
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (days(8) - days( wday(day))))  #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
################################################################################
## Formatting the hourly range #################################################
################################################################################
hours <- day_start : day_end
hours[hours < 10] <- paste0("0",hours[hours < 10])
hours <- paste0("$", hours, "^{00}$", collapse="\\\\\n")
hours <- paste0(hours,"\\\\\n")
################################################################################
## Calculating start and end dates #############################################
################################################################################
# Convert start into date and extract year and month
start <- dmy(start)
start_month <- month(start)
start_year <- year(start)
# Find the first and last date for the monthly overview
monthly_start <- paste("01", start_month, start_year, sep=".")
monthly_start <- dmy(monthly_start)
monthly_length <- paste(monthly_pages*6, "months")
monthly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=monthly_length
)[2] - 1
monthly_end <- ymd(monthly_end)
# Find first and last date for the weekly overview
weekly_start <- prevbestmonday(start)
weekly_end <- nextbestsunday(monthly_end)
weekly_end
monthly_length
weekly_end <- seq.Date(as.Date(monthly_start),
length=2,
by="12 months",
)[2] - 1
weekly_end
weekly_end <- ymd(weekly_end)
rm(list=ls())
################################################################################
## Cusomizable input ###########################################################
################################################################################
start <- "01.08.2015" # any date around which the agenda should begin (dd.mm.yyyy)
monthly_pages <- 3 # number of PAGES for the monthly overview (1 PAGE = 6 MONTHS)
weekly_pages <- "12 months" #number of MONTHS for the week-on-2-pages agenda
day_start <- 7 #first hour in the week-on-2-pages agenda
day_end <- 21 #last hour in the week-on-2-pages agenda
################################################################################
## Set-Up, packages, and custom functions ######################################
################################################################################
invisible(Sys.setlocale("LC_ALL","English"))
library(dplyr)
library(reshape2)
library(lubridate)
# from Hadley's comment on http://stackoverflow.com/a/6669237/4798582:
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
# prevbestmonday returns next best Monday
# (in the past if day unequal to Monday,
#  therefore the name: prev(ious) best monday)
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
# nextbestsunday returns next best Sunday
# (in the future if day unequal to Sunday)
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (days(8) - days( wday(day))))  #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
################################################################################
## Formatting the hourly range #################################################
################################################################################
hours <- day_start : day_end
hours[hours < 10] <- paste0("0",hours[hours < 10])
hours <- paste0("$", hours, "^{00}$", collapse="\\\\\n")
hours <- paste0(hours,"\\\\\n")
################################################################################
## Calculating start and end dates #############################################
################################################################################
# Convert start into date and extract year and month
start <- dmy(start)
start_month <- month(start)
start_year <- year(start)
# Find the first and last date for the monthly overview
monthly_start <- paste("01", start_month, start_year, sep=".")
monthly_start <- dmy(monthly_start)
monthly_length <- paste(monthly_pages*6, "months")
monthly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=monthly_length
)[2] - 1
monthly_end <- ymd(monthly_end)
# Find first and last date for the weekly overview
weekly_start <- prevbestmonday(start)
##
#agenda length: 1.5 years
#weekly_end <- nextbestsunday(monthly_end)
weekly_start
weekly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=weeklypages, #defined in the customizable section
)[2] - 1
weekly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=weekly_pages, #defined in the customizable section
)[2] - 1
weekly_end
weekly_end <- ymd(weekly_end)
weekly_end
weekly_end <- nextbestsunday(weekly_end)
weekly_end
#agenda length: 1 year
weekly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=weekly_pages, #defined in the customizable section
)[2] - 1
weekly_end <- nextbestsunday(weekly_end)
weekly_end
weekly_start
format(weekly_start, "%m %Y")
format(weekly_start, "%M %Y")
format(weekly_start, "%m %Y")
format(weekly_start, "%B %Y")
format(monthly_start, "%B %Y")
weekly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=weekly_pages, #defined in the customizable section
)[2] - 1
ymd(weekly_end)
weekly_start <- prevbestmonday(start)
weekly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=weekly_pages, #defined in the customizable section
)[2] - 1
weekly_end <- ymd(weekly_end)
# Interlude: save date range for title page
# must occur before applying nextbestsunday()
title_range <- paste(format(monthly_start, "%B %Y"),
format(weekly_end, "%B %Y")
collapse=" - ")
title_range <- paste(format(monthly_start, "%B %Y"),
format(weekly_end, "%B %Y"),
collapse=" - ")
title_range
title_range <- paste(format(monthly_start, "%B %Y"),
format(weekly_end, "%B %Y"),
sep = " - ")
title_range
d1
start <- "01.08.2015" # any date around which the agenda should begin (dd.mm.yyyy)
monthly_pages <- 3 # number of PAGES for the monthly overview (1 PAGE = 6 MONTHS)
weekly_pages <- "12 months" #number of MONTHS for the week-on-2-pages agenda
day_start <- 7 #first hour in the week-on-2-pages agenda
day_end <- 21 #last hour in the week-on-2-pages agenda
################################################################################
## Set-Up, packages, and custom functions ######################################
################################################################################
invisible(Sys.setlocale("LC_ALL","English"))
library(dplyr)
library(reshape2)
library(lubridate)
# from Hadley's comment on http://stackoverflow.com/a/6669237/4798582:
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
# prevbestmonday returns next best Monday
# (in the past if day unequal to Monday,
#  therefore the name: prev(ious) best monday)
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
# nextbestsunday returns next best Sunday
# (in the future if day unequal to Sunday)
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (days(8) - days( wday(day))))  #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
################################################################################
## Formatting the hourly range #################################################
################################################################################
hours <- day_start : day_end
hours[hours < 10] <- paste0("0",hours[hours < 10])
hours <- paste0("$", hours, "^{00}$", collapse="\\\\\n")
hours <- paste0(hours,"\\\\\n")
################################################################################
## Calculating start and end dates #############################################
################################################################################
# Convert start into date and extract year and month
start <- dmy(start)
start_month <- month(start)
start_year <- year(start)
# Find the first and last date for the monthly overview
monthly_start <- paste("01", start_month, start_year, sep=".")
monthly_start <- dmy(monthly_start)
monthly_length <- paste(monthly_pages*6, "months")
monthly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=monthly_length
)[2] - 1
monthly_end <- ymd(monthly_end)
# Find first and last date for the weekly overview
weekly_start <- prevbestmonday(start)
weekly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=weekly_pages, #defined in the customizable section
)[2] - 1
weekly_end <- ymd(weekly_end)
#--------------------------------------------------
# Interlude: save date range for title page
# must occur before applying nextbestsunday(), because the next Sunday might lie
# in the next month. Better: use different names in the future.
title_range <- paste(format(monthly_start, "%B %Y"),
format(weekly_end, "%B %Y"),
sep = " - ")
#--------------------------------------------------
weekly_end <- nextbestsunday(weekly_end)
################################################################################
## Calculating the dates for the weekly overview ###############################
################################################################################
#abbreviations: https://stat.ethz.ch/R-manual/R-devel/library/base/html/strptime.html
weekly_range <- seq(weekly_start, weekly_end, "days")
weekly_dates <- format(weekly_range, "%d.%m") #31.01
weekly_days <- format(weekly_range, "%A")     #Monday
weekly_weeks <- format(weekly_range,"%W") #1
weekly_months <- format(weekly_range, "%B")   #January
weekly_years <- format(weekly_range, "%Y")    #2015
#weekly_wknds  <- ifelse(wday(weekly_range) %in% c(7,1), TRUE, FALSE)  #weekends
weekly_df <- data.frame(weekly_dates,
weekly_days,
weekly_weeks,
#weekly_wknds
weekly_months,
weekly_years)
# remove weekly_ from column names
colnames(weekly_df) <- gsub(".*\\_","",colnames(weekly_df))
################################################################################
## Calculating the dates for the monthly overview ##############################
################################################################################
monthly_range <- seq(monthly_start, monthly_end, "days")
monthly_dates <- format(monthly_range, "%d")    #31
# monthly_days <- format(monthly_range, "%a")     #Mon
# monthly_wknds <- ifelse(wday(monthly_range) %in% c(7,1), TRUE, FALSE) #weekends
# monthly_weeks <- format(monthly_range,"%W") #1
# monthly_months <- format(monthly_range, "%B")   #January
# monthly_years <- format(monthly_range, "%Y")    #2015
monthly_dayweek <- format(monthly_range, "%d %a.%W")
#dayweek will be split later into |Day Weekday| and |Weeknumbers|
#probably not the cleanest way of doing that, but this way I only have to
#format one data.frame and can extract the values into 2 data.frames once
#that is done
monthly_monthyear <- format(monthly_range, "%B %Y")
monthly_df <- data.frame(monthly_dates,
# monthly_days,
# monthly_weeks,
# monthly_months,
# monthly_years,
# monthly_wknds
monthly_dayweek,
monthly_monthyear)
# remove monthly_ from column names
colnames(monthly_df) <- gsub(".*\\_","",colnames(monthly_df))
################################################################################
## Creating the monthly overview ###############################################
################################################################################
overview <- dcast(monthly_df, dates ~ monthyear, value.var="dayweek")
overview <- overview[,-1] #remove dates variable after casting
# Sort columns for display
overview_names <- dmy(paste("01",names(overview)))
overview_names <- sort(overview_names)
overview_names <- format(overview_names, "%B %Y")
overview <- overview[factor(overview_names)]
#setcolorder(setDT(overview), overview_names) #requires (data.table)
# Remove year from column names, except for
# first months in overview (keepyear) and for Januaries (indexed with grepl)
keepyear <- seq(1,length(colnames(overview)), by=7)
keepyear <- keepyear - 0: (length(keepyear)-1)
colnames(overview)[-keepyear][!grepl("January", names(overview)[-keepyear])] <- gsub(
'([A-z]+) .*',
'\\1',
colnames(overview)[-keepyear])[!grepl("January", names(overview)[-keepyear])]
# Split overview into weeknumbers (overview_wknrs) and days + weekdays (overview)
# Important: since I overwrite "overview" in the second line below, overview_wknrs
# must be created first. Might make that neater sometime (i.e., use different names)
overview_wknrs <- apply(overview, 1:2, function(x) gsub(".*\\.","",x))
overview <- apply(overview, 1:2, function(x) gsub("\\..*","",x))
## Weekends in overview
Saturdays <- apply(overview, 1:2, function(x) grepl("(Sat)", x))
Sundays <- apply(overview, 1:2, function(x) grepl("(Sun)", x))
## Mondays in overview (weeknumbers will be inserted at Mondays)
Mondays <- apply(overview, 1:2, function(x) grepl("(Mon)",x))
################################################################################
## Weekly Child ################################################################
################################################################################
week = NULL
a <- 1:nrow(weekly_df)
b <- seq.int(1L, length(a), 7L)
#b <- c(1,8) #for testing
for (i in b) {week = c(week, knit_child('calendarChild.Rnw'))}
################################################################################
## Overview Child ##############################################################
################################################################################
d <- 1:ncol(overview)
max <- 6
x <- seq_along(d)
d1 <- split(d, ceiling(x/max))
monthc <- NULL
for (i in d1) monthc <- c(monthc, knit_child('calendarChildOverview.Rnw'))
d1
rev(d1)
d1
i
d1[[1]]
i %in% d1[[1]]
sum(i %in% d1[[1]])
sum(i %in% d1[[1]]) > 0
sum(i %in% rev(d1)[[1]]) > 0
i <- 13:18
sum(i %in% rev(d1)[[1]]) > 0
label <- ifelse(sum(i %in% rev(d1)[[1]]) > 0, "lastpage", "notlastpage")
label
extrapage <- ifelse(sum(i %in% d1[[1]]) > 0, "\\newpage", "%")
extrapage
extrapage <- ifelse(sum(i %in% d1[[1]]) > 0, "\newpage", "%")
extrapage
i
i <- 1:6
extrapage <- ifelse(sum(i %in% d1[[1]]) > 0, "\newpage", "%")
extrapage
extrapage
extrapage <- ifelse(sum(i %in% d1[[1]]) > 0,
"{\\begin{minipage} \\newpage \\newpage \\end{minipage}}", "%")
extrapage
gsub("\\", "\", extrapage)
gsub("\\\\", "\\", extrapage)
gsub("\\", "\", extrapage)
gsub("\\\", "\\", extrapage)
extrapage <- ifelse(sum(i %in% d1[[1]]) > 0,
"{\backslash.begin{minipage} \backslash.newpage \backslash.newpage \backslash.end{minipage}}", "%")
extrapage
gsub(".", "", extrapage)
extrapage
gsub(extrapage, ".", "")
?gsub
sub(".", "", extrapage)
label
foo <- "test & _"
sanitize(foo)
sanitize <- function(str) {
result <- str
result <- gsub("&", "\\\\&", result, fixed = TRUE)
result <- gsub("_", "\\\\_", result, fixed = TRUE)
result
}
foo <- "test & _"
sanitize(foo)
sanitize(foo)
b
bla
bla = c(1,2,3,4,5,6)
bla
sub("_", "\", bli)
bli
bli
bli = "\\begin{minipage} \\newpage \\newpage \\end{minipage}"
bli
