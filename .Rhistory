weekly_months <- format(weekly_range, "%B")   #January
weekly_years <- format(weekly_range, "%Y")    #2015
#weekly_wknds  <- ifelse(wday(weekly_range) %in% c(7,1), TRUE, FALSE)  #weekends
weekly_df <- data.frame(weekly_dates,
weekly_days,
weekly_weeks,
#weekly_wknds
weekly_months,
weekly_years)
# remove weekly_ from column names
colnames(weekly_df) <- gsub(".*\\_","",colnames(weekly_df))
################################################################################
## Calculating the dates for the monthly overview ##############################
################################################################################
monthly_range <- seq(monthly_start, monthly_end, "days")
monthly_dates <- format(monthly_range, "%d")    #31
# monthly_days <- format(monthly_range, "%a")     #Mon
# monthly_wknds <- ifelse(wday(monthly_range) %in% c(7,1), TRUE, FALSE) #weekends
# monthly_weeks <- format(monthly_range,"%W") #1
# monthly_months <- format(monthly_range, "%B")   #January
# monthly_years <- format(monthly_range, "%Y")    #2015
monthly_dayweek <- format(monthly_range, "%d %a.%W")
#dayweek will be split later into |Day Weekday| and |Weeknumbers|
#probably not the cleanest way of doing that, but this way I only have to
#format one data.frame and can extract the values into 2 data.frames once
#that is done
monthly_monthyear <- format(monthly_range, "%B %Y")
monthly_df <- data.frame(monthly_dates,
# monthly_days,
# monthly_weeks,
# monthly_months,
# monthly_years,
# monthly_wknds
monthly_dayweek,
monthly_monthyear)
# remove monthly_ from column names
colnames(monthly_df) <- gsub(".*\\_","",colnames(monthly_df))
################################################################################
## Creating the monthly overview ###############################################
################################################################################
overview <- dcast(monthly_df, dates ~ monthyear, value.var="dayweek")
overview <- overview[,-1] #remove dates variable after casting
# Sort columns for display
overview_names <- dmy(paste("01",names(overview)))
overview_names <- sort(overview_names)
overview_names <- format(overview_names, "%B %Y")
overview <- overview[factor(overview_names)]
#setcolorder(setDT(overview), overview_names) #requires (data.table)
# Interlude: save date range for title page
title_range <- paste(colnames(overview)[c(1, length(colnames(overview)))],
collapse=" - ")
# Remove year from column names, except for
# first months in overview (keepyear) and for Januaries (indexed with grepl)
keepyear <- seq(1,length(colnames(overview)), by=7)
keepyear <- keepyear - 0: (length(keepyear)-1)
colnames(overview)[-keepyear][!grepl("January", names(overview)[-keepyear])] <- gsub(
'([A-z]+) .*',
'\\1',
colnames(overview)[-keepyear])[!grepl("January", names(overview)[-keepyear])]
# Split overview into weeknumbers (overview_wknrs) and days + weekdays (overview)
# Important: since I overwrite "overview" in the second line below, overview_wknrs
# must be created first. Might make that neater sometime (i.e., use different names)
overview_wknrs <- apply(overview, 1:2, function(x) gsub(".*\\.","",x))
overview <- apply(overview, 1:2, function(x) gsub("\\..*","",x))
## Weekends in overview
wknds <- apply(overview, 1:2, function(x) grepl("(Sat)|(Sun)", x))
## Mondays in overview (weeknumbers will be inserted at Mondays)
Mondays <- apply(overview, 1:2, function(x) grepl("(Mon)",x))
d <- 1:ncol(overview)
max <- 6
x <- seq_along(d)
d1 <- split(d, ceiling(x/max))
d1
monthc <- NULL
d1
d1
i
i %in% d1
d1 %in% i
d1[[1]]
d1[1]
d1[[1]]
length(d1)
1:3 %in% 2
which(someVector %% 2)
someVector = c(1, 3, 4, 6, 3, 9, 2, -5, -2)
which(someVector %% 2)
which(someVector %% 2==1)
someVector[someVector %% 2]
someVector[someVector %in% 2]
length(d1)
1:length(d1)
(1:length(d1))
(1:length(d1)) %% 2
(1:length(d1)) %% 2 ==1
(1:length(d1)) %in% 2
(1:length(d1))[(1:length(d1)) %in% 2 ]
d1[[(1:length(d1))[(1:length(d1)) %in% 2 ]]]
bla <- 1:10
bli <- 1:5
bla %in% bli
sum(bla %in% bli)>0
sum(i %in% d1[[(1:length(d1))[(1:length(d1)) %in% 2 ]]])>0
i <- 7:13
sum(i %in% d1[[(1:length(d1))[(1:length(d1)) %in% 2 ]]])>0
i <- 13:18
sum(i %in% d1[[(1:length(d1))[(1:length(d1)) %in% 2 ]]])>0
range(d1)
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
ifelse(switch, print("\newpage\rotatebox{180}{\begin{minipage}{\linewidth}"), print("%")
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
ifelse(switch,
print("\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}"),
print("%")
)
ifelse(switch,
print("\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}"),
print("%")
)
switch
ifelse(switch,
print("\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}"),
"%")
ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
i
i <- 7:12
ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
ifelse(switch, "\\end{minipage}}\\clearpage", "%")
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
overviewtable <- print(xtable(overviewcol2,
align= c(rep("p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}",length(i)-2),
"|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth
-12\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746 and http://tex.stackexchange.com/a/155627/62746
tabular.environment="tabular", #tabular works ####tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overviewcol2)-1)))#,#)
print(xtable(overviewcol2,
align= c(rep("p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}",length(i)-2),
"|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth
-12\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746 and http://tex.stackexchange.com/a/155627/62746
tabular.environment="tabular", #tabular works ####tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overviewcol2)-1)))#,
print(xtable(overviewcol2,
align= c(rep("p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}",length(i)-2),
"|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth
-12\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746 and http://tex.stackexchange.com/a/155627/62746
tabular.environment="tabular", #tabular works ####tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overviewcol2)-1)))
ifelse(switch,
print("\newpage\rotatebox{180}{\begin{minipage}{\linewidth}"),
"%")
print(xtable(overviewcol2,
align= c(rep("p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}",length(i)-2),
"|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth
-12\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746 and http://tex.stackexchange.com/a/155627/62746
tabular.environment="tabular", #tabular works ####tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overviewcol2)-1)))#
ifelse(switch,
"\newpage\rotatebox{180}{\begin{minipage}{\linewidth}",
"%")
beginswitch <- ifelse(switch,
print"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
ifelse(switch,
print"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
print"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage", "%")
cat(endswitch)
"%")
print(ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%"),
sanitize.text.function = identity)
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
cat(ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
)
cat(ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%"))
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
cat("%")
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
i <- 1:6
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage", "%")
cat(endswitch)
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%", "%")
cat(endswitch)
i <- 7:12
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%", "%")
cat(endswitch)
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage", "%")
beginswitch <- ifelse(switch,
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
cat("\\renewcommand{\\arraystretch}{1.2} %increase cell height here. If added later, clipping with tikz won't work. Increasing cell height means less scaling through adjustbox, which means the font stays smaller\n")
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
cat("\\renewcommand{\\arraystretch}{1.2}") #increase cell height here. If added later, clipping with tikz won't work. Increasing cell height means less scaling through adjustbox, which means the font stays smaller
cat("\\begin{adjustbox}{width = \\linewidth, totalheight=\\textheight}")# scale table to fill height and width (width already defined with dimexpr below, but height required here)
cat("\\begin{tikzpicture}[local bounding box=picture, baseline=(picture.south), line width=.1mm,rounded corners=.5em]  %thanks to Mark Wibrow (http://tex.stackexchange.com/a/258203/62746)
\\node(thetable) [clip,inner sep=.5\\pgflinewidth] {%
\\color{textgray}\\tiny")
cat("bla
bla")
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
#knitr childs can only have one codeblock
cat("\\renewcommand{\\arraystretch}{1.2}") #increase cell height here. If added later, clipping with tikz won't work. Increasing cell height means less scaling through adjustbox, which means the font stays smaller
cat("\\begin{adjustbox}{width = \\linewidth, totalheight=\\textheight}")# scale table to fill height and width (width already defined with dimexpr below, but height required here)
cat("\\begin{tikzpicture}[local bounding box=picture, baseline=(picture.south), line width=.1mm,rounded corners=.5em]  %thanks to Mark Wibrow (http://tex.stackexchange.com/a/258203/62746)
\\node(thetable) [clip,inner sep=.5\\pgflinewidth] {%
\\color{textgray}\\tiny")
library(xtable)
library(abind)
#Color for weekends in overview with abind (result: overviewcol(ored))
colwknds <- ifelse(wknds, "\\cellcolor[gray]{0.95}", "")
datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
overviewcol <- apply(datArray,1:2,function(x)paste0(x[1], x[2]))
overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
#Paste weeknumbers in overview with another abind
wknrs <- ifelse(Mondays[,i], paste0(" \\hfill \\supertiny{", overview_wknrs[,i], "}"), "")
datArray2 <- abind(wknrs, overviewcol, along=3)
overviewcol2 <- apply(datArray2,1:2,function(x)paste0(x[2], x[1]))
overviewcol2 <-  apply(overviewcol2, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
overviewtable <- print(xtable(overviewcol2,
align= c(rep("p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}",length(i)-2),
"|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth
-12\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746 and http://tex.stackexchange.com/a/155627/62746
tabular.environment="tabular", #tabular works ####tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overviewcol2)-1)))#,#)
cat("};
\\draw [textgray]([draw=textgray, fill=white, xshift=.5*\\pgflinewidth,yshift=-.5*\\pgflinewidth]thetable.north west)
rectangle ([xshift=-.5*\\pgflinewidth,yshift=.5*\\pgflinewidth]thetable.south east);
\\end{tikzpicture}
\\end{adjustbox}
%")
overviewtable <- print(xtable(overviewcol2,
align= c(rep("p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}",length(i)-2),
"|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth
-12\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746 and http://tex.stackexchange.com/a/155627/62746
tabular.environment="tabular", #tabular works ####tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overviewcol2)-1)))#,#)
cat("\\renewcommand{\\arraystretch}{1.2}\n") #increase cell height here. If added later, clipping with tikz won't work. Increasing cell height means less scaling through adjustbox, which means the font stays smaller
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
#knitr childs can only have one codeblock
cat("\\renewcommand{\\arraystretch}{1.2}\n") #increase cell height here. If added later, clipping with tikz won't work. Increasing cell height means less scaling through adjustbox, which means the font stays smaller
cat("\\begin{adjustbox}{width = \\linewidth, totalheight=\\textheight}\n")# scale table to fill height and width (width already defined with dimexpr below, but height required here)
cat("\\begin{tikzpicture}[local bounding box=picture, baseline=(picture.south), line width=.1mm,rounded corners=.5em]  %thanks to Mark Wibrow (http://tex.stackexchange.com/a/258203/62746)
\\node(thetable) [clip,inner sep=.5\\pgflinewidth] {%
\\color{textgray}\\tiny\n")
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
#knitr childs can only have one codeblock
cat("\\renewcommand{\\arraystretch}{1.2}\n") #increase cell height here. If added later, clipping with tikz won't work. Increasing cell height means less scaling through adjustbox, which means the font stays smaller
cat("\\begin{adjustbox}{width = \\linewidth, totalheight=\\textheight}\n")# scale table to fill height and width (width already defined with dimexpr below, but height required here)
cat("\\begin{tikzpicture}[local bounding box=picture, baseline=(picture.south), line width=.1mm,rounded corners=.5em]  %thanks to Mark Wibrow (http://tex.stackexchange.com/a/258203/62746)
\\node(thetable) [clip,inner sep=.5\\pgflinewidth] {%
\\color{textgray}\\tiny\n")
overviewtable <- print(xtable(overviewcol2,
align= c(rep("p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth -
12\\tabcolsep\\relax}",length(i)-2),
"|p{0.166666666666666666
\\dimexpr
\\linewidth -
7\\arrayrulewidth
-12\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746 and http://tex.stackexchange.com/a/155627/62746
tabular.environment="tabular", #tabular works ####tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overviewcol2)-1)))#,#)
#do not define size="..." below. define outside of table environment so that clipping with tikz works
#size="\\color{textgray}\\tiny\\renewcommand{\\arraystretch}{1.9}") #http://tex.stackexchange.com/a/50337/62746
cat("};\n
\\draw [textgray]([draw=textgray, fill=white, xshift=.5*\\pgflinewidth,yshift=-.5*\\pgflinewidth]thetable.north west)\n
rectangle ([xshift=-.5*\\pgflinewidth,yshift=.5*\\pgflinewidth]thetable.south east);\n
\\end{tikzpicture}\n
\\end{adjustbox}\n
%")
cat("\n};\n
\\draw [textgray]([draw=textgray, fill=white, xshift=.5*\\pgflinewidth,yshift=-.5*\\pgflinewidth]thetable.north west)\n
rectangle ([xshift=-.5*\\pgflinewidth,yshift=.5*\\pgflinewidth]thetable.south east);\n
\\end{tikzpicture}\n
\\end{adjustbox}\n
%")
cat("\n};\n
\\draw [textgray]([draw=textgray, fill=white, xshift=.5*\\pgflinewidth,yshift=-.5*\\pgflinewidth]thetable.north west)\n
rectangle ([xshift=-.5*\\pgflinewidth,yshift=.5*\\pgflinewidth]thetable.south east);\n
\\end{tikzpicture}\n
\\end{adjustbox}\n")
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%\n", "%\n")
cat(endswitch)
rm(list=ls())
nrow(weekly_df)
week = NULL
a <- 1:18
b <- seq.int(1L, length(a), 7L)
d <- 1:18
max <- 6
x <- seq_along(d)
d1 <- split(d, ceiling(x/max))
monthc <- NULL
d1
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
i <- 1:6
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
#knitr childs can only have one code chunk; continue in knitr chunk using cat
cat("\\Latex\n") #increase cell height here. If added later, clipping with tikz won't work.
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%\n", "%\n")
cat(endswitch)
i <- 7:12
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
#knitr childs can only have one code chunk; continue in knitr chunk using cat
cat("\\Latex\n") #increase cell height here. If added later, clipping with tikz won't work.
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%\n", "%\n")
cat(endswitch)
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}",
"%")
cat(beginswitch)
\Sexpr{knit_child('beginswitch.Rnw')}
switch <- sum(i %in% d1[[ (1:length(d1)) [(1:length(d1)) %in% 2 ] ]])>0
beginswitch <- ifelse(switch,
"\\newpage\\rotatebox{180}{\\begin{minipage}{\\linewidth}\n",
"%\n")
cat(beginswitch)
endswitch <- ifelse(switch, "\\end{minipage}}\\clearpage%", "%")
cat(endswitch)
