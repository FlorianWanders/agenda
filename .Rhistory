Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
test <- seq(ymd("2015.06.29"), ymd("2015.07.05"), "days")
test1 <- test[7]
nextbestsunday(test1)
test1 <- test[1]
nextbestsunday(test1)
test1 <- test[3]
nextbestsunday(test1)
test1 <- test[4]
nextbestsunday(test1)
test1 <- test[5]
nextbestsunday(test1)
test1 <- test[6]
nextbestsunday(test1)
test1 <- test[7]
nextbestsunday(test1)
rm(list=ls())
start <- "01.07.2015" # any date around which the agenda should begin (dd.mm.yyyy)
monthly_pages <- 3 # number of pages for the monthly overview (1 page = 6 months)
################################################################################
## Set-Up, packages, and custom functions ######################################
################################################################################
invisible(Sys.setlocale("LC_ALL","English"))
library(dplyr)
library(reshape2)
library(lubridate)
# from Hadley's comment on http://stackoverflow.com/a/6669237/4798582:
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
# prevbestmonday returns next best Monday
# (in the past if day unequal to Monday,
#  therefore the name: prev(ious) best monday)
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) ) #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) ) #other days
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 ))  #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Monday
day - days( wday(day)-2 ))  #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
rm(list=ls())
start <- "01.07.2015" # any date around which the agenda should begin (dd.mm.yyyy)
monthly_pages <- 3 # number of pages for the monthly overview (1 page = 6 months)
################################################################################
## Set-Up, packages, and custom functions ######################################
################################################################################
invisible(Sys.setlocale("LC_ALL","English"))
library(dplyr)
library(reshape2)
library(lubridate)
# from Hadley's comment on http://stackoverflow.com/a/6669237/4798582:
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
# prevbestmonday returns next best Monday
# (in the past if day unequal to Monday,
#  therefore the name: prev(ious) best monday)
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
# nextbestsunday returns next best Sunday
# (in the future if day unequal to Sunday)
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (days(8) - days( wday(day))))  #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
################################################################################
## Calculating start and end dates #############################################
################################################################################
# Convert start into date and extract year and month
start <- dmy(start)
start_month <- month(start)
start_year <- year(start)
# Find the first and last date for the monthly overview
monthly_start <- paste("01", start_month, start_year, sep=".")
monthly_start <- dmy(monthly_start)
monthly_length <- paste(monthly_pages*6, "months")
monthly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=monthly_length
)[2] - 1
monthly_end <- ymd(monthly_end)
# Find first and last date for the weekly overview
weekly_start <- prevbestmonday(start)
weekly_end <- nextbestsunday(monthly_end)
################################################################################
## Calculating the dates for the weekly overview ###############################
################################################################################
weekly_range <- seq(weekly_start, weekly_end, "days")
weekly_dates <- format(weekly_range, "%d.%m") #31.01
weekly_days <- format(weekly_range, "%A")     #Monday
weekly_weeks <- format(weekly_range,"%W") #1
weekly_months <- format(weekly_range, "%B")   #January
weekly_years <- format(weekly_range, "%Y")    #2015
weekly_wknds  <- ifelse(wday(weekly_range) %in% c(7,1), TRUE, FALSE)  #weekends
weekly_df <- data.frame(weekly_dates,
weekly_days,
weekly_weeks,
weekly_months,
weekly_years,
weekly_wknds)
colnames(weekly_df) <- gsub(".*\\_","",colnames(weekly_df))
monthly_range <- seq(monthly_start, monthly_end, "days")
monthly_dates <- format(monthly_range, "%d")    #31
# monthly_days <- format(monthly_range, "%a")     #Mon  #delete?
# monthly_wknds <- ifelse(wday(monthly_range) %in% c(7,1), TRUE, FALSE)  #weekends #delete
# monthly_weeks <- format(monthly_range,"%W") #1
# monthly_months <- format(monthly_range, "%B")   #January
# monthly_years <- format(monthly_range, "%Y")    #2015
#----------------------------------------------------------
monthly_daywday <- format(monthly_range, "%d %a")
monthly_monthyear <- format(monthly_range, "%B %Y")
monthly_df <- data.frame(
monthly_dates,
#   monthly_days,
#   monthly_weeks,
#   monthly_months,
#   monthly_years,
monthly_daywday,
monthly_monthyear,
#monthly_wknds
)
# remove monthly_ from column names
colnames(monthly_df) <- gsub(".*\\_","",colnames(monthly_df))
colwknds <- ifelse(wknds, "\\cellcolor[gray]{0.95}", "\\textcolor[gray]{0.95}")
datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
lbrary(abind)
library(abind)
datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
overviewcol <- apply(datArray,1:2,function(x)paste(x[1], x[2], sep=""))
overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
overviewtable <- print(xtable(subset(overviewcol, select=names(overview)[i]),
align= c(rep("p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}",length(i)-2),
"|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746
#align= c(rep("|p{0.2\\textwidth}",length(i)),"|p{0.2\\textwidth}|")),
tabular.environment="tabular", #tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overview)-1)))
library(xtable)
library(xtable)
library(abind)  #http://stackoverflow.com/a/6408356/4798582
colwknds <- ifelse(wknds, "\\cellcolor[gray]{0.95}", "")
datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
overviewcol <- apply(datArray,1:2,function(x)paste(x[1], x[2], sep=""))
overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
overviewtable <- print(xtable(subset(overviewcol, select=names(overview)[i]),
align= c(rep("p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}",length(i)-2),
"|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746
#align= c(rep("|p{0.2\\textwidth}",length(i)),"|p{0.2\\textwidth}|")),
tabular.environment="tabular", #tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overview)-1)))
colwknds <- ifelse(wknds, "\\cellcolor[gray]{0.95}", "\\color[gray]")
datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
overviewcol <- apply(datArray,1:2,function(x)paste(x[1], x[2], sep=""))
overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
overviewtable <- print(xtable(subset(overviewcol, select=names(overview)[i]),
align= c(rep("p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}",length(i)-2),
"|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746
#align= c(rep("|p{0.2\\textwidth}",length(i)),"|p{0.2\\textwidth}|")),
tabular.environment="tabular", #tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overview)-1)))
colwknds
datArray
overview
apply(overview, 1:2, function(x) ifelse(wknds, paste0("\\cellcolor[gray]{0.95}", x), paste0("{\color{textgray", x, "}")))
apply(overview,
1:2,
function(x) {
ifelse(wknds,
paste0("\\cellcolor[gray]{0.95}", x),
paste0("{\color{textgray", x, "}"))
}
)
overview
dim(overview)
dim(wknds)
apply(overview,
1:2,
function(x) {
ifelse(wknds,
paste0("\\cellcolor[gray]{0.95}", x),
paste0("{\color{textgray", x, "}"))
}
)
apply(overview,
1:2,
function(x) {
ifelse(wknds,
paste0("\\cellcolor[gray]{0.95}", x),
paste0("{\\color{textgray", x, "}"))
}
)
colwknds <- ifelse(wknds, "\\cellcolor[gray]{0.95}", "")
#------------------------------
overviewcol <- apply(overview[,i],
1:2,
function(x) {
ifelse(wknds[,i],
paste0("\\cellcolor[gray]{0.95}", x),
paste0("{\\color{textgray", x, "}"))
}
)
overviewcol
#datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
#overviewcol <- apply(datArray,1:2,function(x)paste(x[1], x[2], sep=""))
#overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
overviewcol
i
#datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
#overviewcol <- apply(datArray,1:2,function(x)paste(x[1], x[2], sep=""))
#overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
overviewcol <- apply(datArray,1:2,function(x)paste(x[1], x[2], sep=""))
overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
overviewcol
apply(overview[,i],
1:2,
function(x) {
ifelse(wknds[,i],
paste0("\\cellcolor[gray]{0.95}", x),
paste0("{\\color{textgray", x, "}"))
}
)
colwknds
overviewcol1 <- apply(overview[,i],
1:2,
function(x) {
ifelse(wknds[,i],
paste0("\\cellcolor[gray]{0.95}", x),
paste0("{\\color{textgray", x, "}"))
}
)
#------------------------------
# datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
# overviewcol <- apply(datArray,1:2,function(x)paste(x[1], x[2], sep=""))
# overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
overviewtable <- print(xtable(subset(overviewcol, select=names(overview)[i]),
align= c(rep("p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}",length(i)-2),
"|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746
#align= c(rep("|p{0.2\\textwidth}",length(i)),"|p{0.2\\textwidth}|")),
tabular.environment="tabular", #tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overview)-1)))
overviewtable
overviewtable
datArray <- abind(colwknds[,i],overview[,i], along=3) #http://stackoverflow.com/a/6408356/4798582
overviewcol <- apply(datArray,1:2,function(x)paste(x[1], x[2], sep=""))
overviewcol <- apply(overviewcol, 1:2, function(x) ifelse(x=="NA","",x)) #combining data.frames has turned NA into string "NA"
overviewtable <- print(xtable(subset(overviewcol, select=names(overview)[i]),
align= c(rep("p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}", 2), #rownames and first line
rep("|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}",length(i)-2),
"|p{0.24\\dimexpr \\textwidth-3\\arrayrulewidth-4\\tabcolsep\\relax}")),
#http://tex.stackexchange.com/a/150987/62746
#align= c(rep("|p{0.2\\textwidth}",length(i)),"|p{0.2\\textwidth}|")),
tabular.environment="tabular", #tabularx when usin gt
floating=FALSE,
include.rownames=FALSE,
sanitize.text.function = identity, #cboettig's comment on http://stackoverflow.com/a/8732785/4798582
hline.after = c(0,1:(nrow(overview)-1)))
#do not define size="..." below. define outside of
overviewtable
bla <- data.frame(da = c(T,F,T,F,F), di = c(F,T,F;T,T) )
bla <- data.frame(da = c(T,F,T,F,F), di = c(F,T,F,T,T) )
bla
bli <- data.frame(da = 1:5, di = 21:25)
apply(da, 1:2, ifelse(bla, "T", "F"))
apply(bli, 1:2, ifelse(bla, "T", "F"))
bla
apply(bli, 1:2, function(x) ifelse(x==bla, "T", "F"))
apply(bli,
1:2,
function(x) {
ifelse(bla,
paste0("\\cellcolor[gray]{0.95}", x),
paste0("{\\color{textgray", x, "}"))
}
)
)
colwknds
start_year
start <- "01.07.2015" # any date around which the agenda should begin (dd.mm.yyyy)
monthly_pages <- 3 # number of pages for the monthly overview (1 page = 6 months)
day_start <- 7
day_end <- 21
################################################################################
## Set-Up, packages, and custom functions ######################################
################################################################################
invisible(Sys.setlocale("LC_ALL","English"))
library(dplyr)
library(reshape2)
library(lubridate)
# from Hadley's comment on http://stackoverflow.com/a/6669237/4798582:
safe.ifelse <- function(cond, yes, no) {
structure(ifelse(cond, yes, no), class = class(yes))
}
# prevbestmonday returns next best Monday
# (in the past if day unequal to Monday,
#  therefore the name: prev(ious) best monday)
prevbestmonday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> -0 already Mon
#   3 --> -1 #Tue
#   4 --> -2 #Wed
#   5 --> -3 #Thu
#   6 --> -4 #Fri
#   7 --> -5 #Sat
#
#   1 --> -6 #Sun
Mo <- safe.ifelse(wday(day) == 1, day - days(6),  #Sunday
day - days( wday(day)-2 )) #other days
Mo <- paste(day(Mo), month(Mo), year(Mo), sep=".")
Mo <- dmy(Mo)
Mo
}
# nextbestsunday returns next best Sunday
# (in the future if day unequal to Sunday)
nextbestsunday <- function(day)   { #requires lubridate
# logic for safe.ifelse statement (custom function by Hadley):
#   2 --> +6# Mon
#   3 --> +5 #Tue
#   4 --> +4 #Wed
#   5 --> +3 #Thu
#   6 --> +2 #Fri
#   7 --> +1 #Sat
#
#   1 #already Sun
Sun <- safe.ifelse( wday(day) == 1, day, #Sunday
day + (days(8) - days( wday(day))))  #other days
Sun <- paste(day(Sun), month(Sun), year(Sun), sep=".")
Sun <- dmy(Sun)
Sun
}
################################################################################
## Formatting the hourly range #################################################
################################################################################
hours <- day_start : day_end
hours[hours < 10] <- paste0("0",hours[hours < 10])
hours <- paste0("$", hours, "^{00}$", collapse="\\\\\n")
hours <- paste0(hours,"}\\\\\n") #add } for closing font-size comment in child
################################################################################
## Calculating start and end dates #############################################
################################################################################
# Convert start into date and extract year and month
start <- dmy(start)
start_month <- month(start)
start_year <- year(start)
# Find the first and last date for the monthly overview
monthly_start <- paste("01", start_month, start_year, sep=".")
monthly_start <- dmy(monthly_start)
monthly_length <- paste(monthly_pages*6, "months")
monthly_end <- seq.Date(as.Date(monthly_start),
length=2,
by=monthly_length
)[2] - 1
monthly_end <- ymd(monthly_end)
# Find first and last date for the weekly overview
weekly_start <- prevbestmonday(start)
weekly_end <- nextbestsunday(monthly_end)
################################################################################
## Calculating the dates for the weekly overview ###############################
################################################################################
weekly_range <- seq(weekly_start, weekly_end, "days")
weekly_dates <- format(weekly_range, "%d.%m") #31.01
weekly_days <- format(weekly_range, "%A")     #Monday
weekly_weeks <- format(weekly_range,"%W") #1
weekly_months <- format(weekly_range, "%B")   #January
weekly_years <- format(weekly_range, "%Y")    #2015
#weekly_wknds  <- ifelse(wday(weekly_range) %in% c(7,1), TRUE, FALSE)  #weekends
weekly_df <- data.frame(weekly_dates,
weekly_days,
weekly_weeks,
#weekly_wknds
weekly_months,
weekly_years)
# remove weekly_ from column names
colnames(weekly_df) <- gsub(".*\\_","",colnames(weekly_df))
################################################################################
## Calculating the dates for the monthly overview ##############################
################################################################################
monthly_range <- seq(monthly_start, monthly_end, "days")
monthly_dates <- format(monthly_range, "%d")    #31
# monthly_days <- format(monthly_range, "%a")     #Mon
# monthly_wknds <- ifelse(wday(monthly_range) %in% c(7,1), TRUE, FALSE)  #weekends
# monthly_weeks <- format(monthly_range,"%W") #1
# monthly_months <- format(monthly_range, "%B")   #January
# monthly_years <- format(monthly_range, "%Y")    #2015
monthly_daywday <- format(monthly_range, "%d %a")
monthly_monthyear <- format(monthly_range, "%B %Y")
monthly_df <- data.frame(monthly_dates,
# monthly_days,
# monthly_weeks,
# monthly_months,
# monthly_years,
# monthly_wknds
monthly_daywday,
monthly_monthyear)
# remove monthly_ from column names
colnames(monthly_df) <- gsub(".*\\_","",colnames(monthly_df))
################################################################################
## Creating the monthly overview ###############################################
################################################################################
overview <- dcast(monthly_df, dates ~ monthyear, value.var="daywday")
overview <- overview[,-1] #remove dates variable after casting
#Sort columns for display
overview_names <- dmy(paste("01",names(overview)))
overview_names <- sort(overview_names)
overview_names <- format(overview_names, "%B %Y")
overview <- overview[factor(overview_names)]
#setcolorder(setDT(overview), overview_names) #requires (data.table)
# Remove year from column names, except for Januaries
colnames(overview)[!grepl("January", names(overview))] <- gsub('([A-z]+) .*', '\\1', colnames(overview))[!grepl("January", names(overview))]
## Weekends in overview
wknds <- apply(overview, 1:2, function(x) grepl("(Sat)|(Sun)", x))
